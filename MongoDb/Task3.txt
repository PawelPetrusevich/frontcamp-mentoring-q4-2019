How many “Chinese” (cuisine) restaurants are in “Queens” (borough)?

> db.restaurants.find({ borough: "Queens", cuisine:"Chinese" }).count()
728

<----------->
What is the _id of the restaurant which has the grade with the highest ever score?

> db.restaurants.find({},{"_id":1}).sort({"grade.score":-1}).limit(1)
{ "_id" : ObjectId("5dee7194531e0f3ed997fcbe") }

<------------>
Add a grade { grade: "A", score: 7, date: ISODate() }to every restaurant in “Manhattan” (borough).

db.restaurants.updateMany({borough: "Manhattan"},{ $addToSet: {grades: { grade: "A", score: 7, date: ISODate() } }})
{ "acknowledged" : true, "matchedCount" : 10258, "modifiedCount" : 10258 }

<------------>
What are the names of the restaurants which havea grade at index 8 with score less then 7?Use projection to include only names without _id

db.restaurants.find( { "grades.8.score": { $lt: 7 }}, { "_id":0, "name": 1 })
{ "name" : "Silver Krust West Indian Restaurant" }
{ "name" : "Pure Food" }

<------------->
What are _id and borough of “Seafood”(cuisine)restaurants  which received at least one “B” grade in period from 2014-02-01 to 2014-03-01? Use projection to include only _id and borough.

db.restaurants.find({ cuisine: "Seafood", grades: { $elemMatch: { $and: [ {date: {$gte: ISODate("2014-02-01")}}, {date: {$lte: ISODate("2014-03-01")}}], grade: "B"}}}, { _id: 1, borough: 1 })

{ "_id" : ObjectId("5deeae010236b8300ab04521"), "borough" : "Bronx" }
{ "_id" : ObjectId("5deeae010236b8300ab04798"), "borough" : "Manhattan" }

<------------->
Create an index which will be used by this query and provide proof (from explain()or Compass UI) that the index is indeed used by the winning plan:

db.restaurants.createIndex( { name: 1 }, { name: "index_by_name" } )
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

<-------------->
Drop index from task 4.1

> db.restaurants.dropIndex({"name":1})
{ "nIndexesWas" : 2, "ok" : 1 }

<-------------->
Create an index to make this query coveredand provide proof (from explain()or CompassUI)that it is indeed covered:

db.restaurants.createIndex( { restaurant_id: 1, borough: 1 }, { name: "index_by_restaurant_id_and_borough" } )
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

<--------------->
Create apartialindexon cuisinefieldwhich will be usedonly when filtering on borough equal to “Staten Island”:

db.restaurants.createIndex({ cuisine: 1 }, { partialFilterExpression:{ "borough":"Staten Island" }, name: "partional_index_by_cuisine"} )
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 3,
        "ok" : 1
}

<---------------------->
Create an index to make query from task 3.4 coveredand provide proof(from explain()or Compass UI)that it is indeed covered

 db.restaurants.createIndex( { "grades.8.score": 1, name: 1 }, { name: "index_by_grades" } )
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 3,
        "numIndexesAfter" : 4,
        "ok" : 1
}